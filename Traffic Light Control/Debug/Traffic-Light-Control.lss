
Traffic-Light-Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b3c  00000bd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000bd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106a  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abb  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061a  00000000  00000000  00003755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 01 	call	0x384	; 0x384 <main>
  8a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:

//All application function prototypes
void App_init(void)
{
	//Button initialization
	Button_init(Button_Port,Button_Pin);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	0e 94 af 01 	call	0x35e	; 0x35e <Button_init>

	//Pedestrian LED initialization
	LED_init(LED_Ped_Port,LED_Ped_G_Pin);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>
	LED_init(LED_Ped_Port,LED_Ped_Y_Pin);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>
	LED_init(LED_Ped_Port,LED_Ped_R_Pin);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>

	//Car LED initialization
	LED_init(LED_Car_Port,LED_Car_G_Pin);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>
	LED_init(LED_Car_Port,LED_Car_Y_Pin);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>
	LED_init(LED_Car_Port,LED_Car_R_Pin);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	81 e4       	ldi	r24, 0x41	; 65
  c6:	0e 94 b3 01 	call	0x366	; 0x366 <LED_init>

	//Timer initialization
	Timer_init();
  ca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <Timer_init>

	//Enable global interrupts 
	sei();
  ce:	78 94       	sei
	
	//Setup rising edge detection for button
	RISING_EDGE_SETUP();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	
	//Setup pin D2 for external interrupts
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <App_start>:
	
}

void App_start(void)
{
		if(carLED == 0)
  de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <carLED>
  e2:	81 11       	cpse	r24, r1
  e4:	40 c0       	rjmp	.+128    	; 0x166 <App_start+0x88>
		{
			
			LED_off(LED_Ped_Port,LED_Ped_G_Pin);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_Y_Pin);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	82 e4       	ldi	r24, 0x42	; 66
  f2:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_R_Pin);
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_G_Pin);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_Y_Pin);
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_R_Pin);
 10e:	62 e0       	ldi	r22, 0x02	; 2
 110:	81 e4       	ldi	r24, 0x41	; 65
 112:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			if(mode == 0)
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	81 11       	cpse	r24, r1
 11c:	04 c0       	rjmp	.+8      	; 0x126 <App_start+0x48>
			{
				LED_on(LED_Ped_Port,LED_Ped_R_Pin);
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	82 e4       	ldi	r24, 0x42	; 66
 122:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
			}
			mode = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(mode == 1)
			{
				LED_on(LED_Car_Port,LED_Car_G_Pin);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
				while(loop < 10){ 
 134:	0d c0       	rjmp	.+26     	; 0x150 <App_start+0x72>
					Timer_delay(500);
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Timer_delay>
					if(mode == 0)
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	88 23       	and	r24, r24
 144:	49 f0       	breq	.+18     	; 0x158 <App_start+0x7a>
					{
						break;
					}
					loop++;	
 146:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			}
			mode = 1;
			if(mode == 1)
			{
				LED_on(LED_Car_Port,LED_Car_G_Pin);
				while(loop < 10){ 
 150:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	78 f3       	brcs	.-34     	; 0x136 <App_start+0x58>
					{
						break;
					}
					loop++;	
				}
				loop = 0;
 158:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			}
			carLED = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <carLED>
			prevCarLED = 0;
 162:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <prevCarLED>
		}
		if(carLED == 1)
 166:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <carLED>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	09 f0       	breq	.+2      	; 0x170 <App_start+0x92>
 16e:	78 c0       	rjmp	.+240    	; 0x260 <App_start+0x182>
		{
			LED_off(LED_Ped_Port,LED_Ped_G_Pin);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_Y_Pin);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_R_Pin);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_G_Pin);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_Y_Pin);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_R_Pin);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			if(mode == 1)
 1a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	21 f5       	brne	.+72     	; 0x1f0 <App_start+0x112>
			{
				if(prevCarLED == 0)
 1a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <prevCarLED>
 1ac:	81 11       	cpse	r24, r1
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <App_start+0xda>
				{
					carLED = 2;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <carLED>
 1b6:	16 c0       	rjmp	.+44     	; 0x1e4 <App_start+0x106>
				}
				else if(prevCarLED == 2)
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	a1 f4       	brne	.+40     	; 0x1e4 <App_start+0x106>
				{
					carLED = 0;
 1bc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <carLED>
 1c0:	11 c0       	rjmp	.+34     	; 0x1e4 <App_start+0x106>
				}
				while(count < 10)
				{
					LED_toggle(LED_Car_Port,LED_Car_Y_Pin);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 bf 01 	call	0x37e	; 0x37e <LED_toggle>
					Timer_delay(500);
 1ca:	84 ef       	ldi	r24, 0xF4	; 244
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Timer_delay>
					count++;
 1d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count>
					if(mode == 0)
 1dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e0:	88 23       	and	r24, r24
 1e2:	21 f0       	breq	.+8      	; 0x1ec <App_start+0x10e>
				}
				else if(prevCarLED == 2)
				{
					carLED = 0;
				}
				while(count < 10)
 1e4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
 1e8:	8a 30       	cpi	r24, 0x0A	; 10
 1ea:	58 f3       	brcs	.-42     	; 0x1c2 <App_start+0xe4>
					if(mode == 0)
					{
						break;
					}
				}
				count = 0;
 1ec:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count>
			}
			if(mode == 0)
 1f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f4:	81 11       	cpse	r24, r1
 1f6:	34 c0       	rjmp	.+104    	; 0x260 <App_start+0x182>
			{
				if(prevCarLED == 0)
 1f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <prevCarLED>
 1fc:	81 11       	cpse	r24, r1
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <App_start+0x132>
				{
					LED_on(LED_Ped_Port,LED_Ped_R_Pin);
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
					carLED = 2;
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <carLED>
 20e:	08 c0       	rjmp	.+16     	; 0x220 <App_start+0x142>
				}
				else if(prevCarLED == 2)
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	31 f4       	brne	.+12     	; 0x220 <App_start+0x142>
				{
					LED_on(LED_Ped_Port,LED_Ped_G_Pin);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
					carLED = 0;
 21c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <carLED>
				}
				LED_off(LED_Ped_Port,LED_Ped_Y_Pin);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	82 e4       	ldi	r24, 0x42	; 66
 224:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
				LED_off(LED_Car_Port,LED_Car_Y_Pin);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
				while(count < 10)
 230:	11 c0       	rjmp	.+34     	; 0x254 <App_start+0x176>
				{
					LED_toggle(LED_Ped_Port,LED_Ped_Y_Pin);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 bf 01 	call	0x37e	; 0x37e <LED_toggle>
					LED_toggle(LED_Car_Port,LED_Car_Y_Pin);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	81 e4       	ldi	r24, 0x41	; 65
 23e:	0e 94 bf 01 	call	0x37e	; 0x37e <LED_toggle>
					Timer_delay(500);
 242:	84 ef       	ldi	r24, 0xF4	; 244
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Timer_delay>
					count++;
 24a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count>
					LED_on(LED_Ped_Port,LED_Ped_G_Pin);
					carLED = 0;
				}
				LED_off(LED_Ped_Port,LED_Ped_Y_Pin);
				LED_off(LED_Car_Port,LED_Car_Y_Pin);
				while(count < 10)
 254:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count>
 258:	8a 30       	cpi	r24, 0x0A	; 10
 25a:	58 f3       	brcs	.-42     	; 0x232 <App_start+0x154>
					LED_toggle(LED_Ped_Port,LED_Ped_Y_Pin);
					LED_toggle(LED_Car_Port,LED_Car_Y_Pin);
					Timer_delay(500);
					count++;
				}
				count = 0;
 25c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count>
			}
			
		}
		if(carLED == 2)
 260:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <carLED>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	09 f0       	breq	.+2      	; 0x26a <App_start+0x18c>
 268:	49 c0       	rjmp	.+146    	; 0x2fc <App_start+0x21e>
		{
			prevCarLED = 2;
 26a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <prevCarLED>
			LED_off(LED_Ped_Port,LED_Ped_G_Pin);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	82 e4       	ldi	r24, 0x42	; 66
 272:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_Y_Pin);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	82 e4       	ldi	r24, 0x42	; 66
 27a:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Ped_Port,LED_Ped_R_Pin);
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	82 e4       	ldi	r24, 0x42	; 66
 282:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_G_Pin);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_Y_Pin);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			LED_off(LED_Car_Port,LED_Car_R_Pin);
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 bb 01 	call	0x376	; 0x376 <LED_off>
			if(mode == 1)
 29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	c1 f4       	brne	.+48     	; 0x2d6 <App_start+0x1f8>
			{
				LED_on(LED_Car_Port,LED_Car_R_Pin);
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
				while(loop < 10){ 
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <App_start+0x1ec>
					Timer_delay(500);
 2b0:	84 ef       	ldi	r24, 0xF4	; 244
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Timer_delay>
					if(mode == 0)
 2b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2bc:	88 23       	and	r24, r24
 2be:	49 f0       	breq	.+18     	; 0x2d2 <App_start+0x1f4>
					{
						break;
					}
					loop++;	
 2c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			LED_off(LED_Car_Port,LED_Car_Y_Pin);
			LED_off(LED_Car_Port,LED_Car_R_Pin);
			if(mode == 1)
			{
				LED_on(LED_Car_Port,LED_Car_R_Pin);
				while(loop < 10){ 
 2ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2ce:	8a 30       	cpi	r24, 0x0A	; 10
 2d0:	78 f3       	brcs	.-34     	; 0x2b0 <App_start+0x1d2>
					{
						break;
					}
					loop++;	
				}
				loop = 0;
 2d2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			}
			if(mode == 0)
 2d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2da:	81 11       	cpse	r24, r1
 2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <App_start+0x218>
			{
				LED_on(LED_Car_Port,LED_Car_R_Pin);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
				LED_on(LED_Ped_Port,LED_Ped_G_Pin);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	82 e4       	ldi	r24, 0x42	; 66
 2ea:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
				Timer_delay(5000);
 2ee:	88 e8       	ldi	r24, 0x88	; 136
 2f0:	93 e1       	ldi	r25, 0x13	; 19
 2f2:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Timer_delay>
			}
			carLED = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <carLED>
 2fc:	08 95       	ret

000002fe <__vector_1>:
		}
}

ISR(EXT_INT_0){
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
	mode = 0;
 320:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(carLED == 1 && prevCarLED == 0){
 324:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <carLED>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	41 f4       	brne	.+16     	; 0x33c <__vector_1+0x3e>
 32c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <prevCarLED>
 330:	81 11       	cpse	r24, r1
 332:	04 c0       	rjmp	.+8      	; 0x33c <__vector_1+0x3e>
		LED_on(LED_Ped_Port,LED_Ped_R_Pin);
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	82 e4       	ldi	r24, 0x42	; 66
 338:	0e 94 b7 01 	call	0x36e	; 0x36e <LED_on>
	}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <Button_init>:
//Include .h
#include "Button_Driver.h"

//All button function definitions
void Button_init(uint8_t buttonPort,uint8_t buttonPin){
	DIO_init(buttonPort,buttonPin,IN);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	0e 94 c7 01 	call	0x38e	; 0x38e <DIO_init>
 364:	08 95       	ret

00000366 <LED_init>:
//Include .h
#include "LED_Driver.h"

//All led function prototypes
void LED_init(uint8_t ledPort,uint8_t ledPin){
	DIO_init(ledPort,ledPin,OUT);
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	0e 94 c7 01 	call	0x38e	; 0x38e <DIO_init>
 36c:	08 95       	ret

0000036e <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	0e 94 41 02 	call	0x482	; 0x482 <DIO_write>
 374:	08 95       	ret

00000376 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	0e 94 41 02 	call	0x482	; 0x482 <DIO_write>
 37c:	08 95       	ret

0000037e <LED_toggle>:
}
void LED_toggle(uint8_t ledPort,uint8_t ledPin){
	DIO_toggle(ledPort,ledPin);
 37e:	0e 94 bb 02 	call	0x576	; 0x576 <DIO_toggle>
 382:	08 95       	ret

00000384 <main>:

//Main Code
int main(void)
{
	//Initialize
	App_init();
 384:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	
	//Main loop
	while(1){
		App_start();
 388:	0e 94 6f 00 	call	0xde	; 0xde <App_start>
 38c:	fd cf       	rjmp	.-6      	; 0x388 <main+0x4>

0000038e <DIO_init>:
#include "DIO_Driver.h"

//All driver function prototypes
void DIO_init(uint8_t portNum, uint8_t pinNum, uint8_t dir)
{
	switch(portNum){
 38e:	82 34       	cpi	r24, 0x42	; 66
 390:	31 f1       	breq	.+76     	; 0x3de <DIO_init+0x50>
 392:	18 f4       	brcc	.+6      	; 0x39a <DIO_init+0xc>
 394:	81 34       	cpi	r24, 0x41	; 65
 396:	39 f0       	breq	.+14     	; 0x3a6 <DIO_init+0x18>
 398:	08 95       	ret
 39a:	83 34       	cpi	r24, 0x43	; 67
 39c:	e1 f1       	breq	.+120    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 39e:	84 34       	cpi	r24, 0x44	; 68
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <DIO_init+0x16>
 3a2:	54 c0       	rjmp	.+168    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3a4:	08 95       	ret
		case PORT_A:
			if(dir == IN){
 3a6:	41 11       	cpse	r20, r1
 3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <DIO_init+0x34>
				CLEAR_BIT(DDRA, pinNum);
 3aa:	2a b3       	in	r18, 0x1a	; 26
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0x28>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0x24>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	8a bb       	out	0x1a, r24	; 26
 3c0:	08 95       	ret
			}else if (dir == OUT){
 3c2:	41 30       	cpi	r20, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_init+0x3a>
 3c6:	5c c0       	rjmp	.+184    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				SET_BIT(DDRA, pinNum);
 3c8:	2a b3       	in	r18, 0x1a	; 26
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_init+0x46>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_init+0x42>
 3d8:	82 2b       	or	r24, r18
 3da:	8a bb       	out	0x1a, r24	; 26
 3dc:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_B:
			if(dir == IN){
 3de:	41 11       	cpse	r20, r1
 3e0:	0c c0       	rjmp	.+24     	; 0x3fa <DIO_init+0x6c>
				CLEAR_BIT(DDRB, pinNum);
 3e2:	27 b3       	in	r18, 0x17	; 23
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_init+0x60>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_init+0x5c>
 3f2:	80 95       	com	r24
 3f4:	82 23       	and	r24, r18
 3f6:	87 bb       	out	0x17, r24	; 23
 3f8:	08 95       	ret
			}else if (dir == OUT){
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	40 c0       	rjmp	.+128    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				SET_BIT(DDRB, pinNum);
 400:	27 b3       	in	r18, 0x17	; 23
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	82 2b       	or	r24, r18
 412:	87 bb       	out	0x17, r24	; 23
 414:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_C:
			if(dir == IN){
 416:	41 11       	cpse	r20, r1
 418:	0c c0       	rjmp	.+24     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
				CLEAR_BIT(DDRC, pinNum);
 41a:	24 b3       	in	r18, 0x14	; 20
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	80 95       	com	r24
 42c:	82 23       	and	r24, r18
 42e:	84 bb       	out	0x14, r24	; 20
 430:	08 95       	ret
			}else if (dir == OUT){
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	29 f5       	brne	.+74     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				SET_BIT(DDRC, pinNum);
 436:	24 b3       	in	r18, 0x14	; 20
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	84 bb       	out	0x14, r24	; 20
 44a:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_D:
			if(dir == IN){
 44c:	41 11       	cpse	r20, r1
 44e:	0c c0       	rjmp	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				CLEAR_BIT(DDRD, pinNum);
 450:	21 b3       	in	r18, 0x11	; 17
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	81 bb       	out	0x11, r24	; 17
 466:	08 95       	ret
			}else if (dir == OUT){
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	51 f4       	brne	.+20     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				SET_BIT(DDRD, pinNum);
 46c:	21 b3       	in	r18, 0x11	; 17
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	82 2b       	or	r24, r18
 47e:	81 bb       	out	0x11, r24	; 17
 480:	08 95       	ret

00000482 <DIO_write>:
	}
}

void DIO_write(uint8_t portNum, uint8_t pinNum, uint8_t value)
{
	switch(portNum){
 482:	82 34       	cpi	r24, 0x42	; 66
 484:	31 f1       	breq	.+76     	; 0x4d2 <DIO_write+0x50>
 486:	18 f4       	brcc	.+6      	; 0x48e <DIO_write+0xc>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	39 f0       	breq	.+14     	; 0x49a <DIO_write+0x18>
 48c:	08 95       	ret
 48e:	83 34       	cpi	r24, 0x43	; 67
 490:	e1 f1       	breq	.+120    	; 0x50a <DIO_write+0x88>
 492:	84 34       	cpi	r24, 0x44	; 68
 494:	09 f4       	brne	.+2      	; 0x498 <DIO_write+0x16>
 496:	54 c0       	rjmp	.+168    	; 0x540 <DIO_write+0xbe>
 498:	08 95       	ret
		case PORT_A:
			if(value == LOW){
 49a:	41 11       	cpse	r20, r1
 49c:	0c c0       	rjmp	.+24     	; 0x4b6 <DIO_write+0x34>
				CLEAR_BIT(PORTA, pinNum); //Write 0
 49e:	2b b3       	in	r18, 0x1b	; 27
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_write+0x28>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_write+0x24>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	8b bb       	out	0x1b, r24	; 27
 4b4:	08 95       	ret
			}else if (value == HIGH){
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_write+0x3a>
 4ba:	5c c0       	rjmp	.+184    	; 0x574 <DIO_write+0xf2>
				SET_BIT(PORTA, pinNum); //Write 1
 4bc:	2b b3       	in	r18, 0x1b	; 27
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0x46>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0x42>
 4cc:	82 2b       	or	r24, r18
 4ce:	8b bb       	out	0x1b, r24	; 27
 4d0:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_B:
			if(value == LOW){
 4d2:	41 11       	cpse	r20, r1
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <DIO_write+0x6c>
				 
				CLEAR_BIT(PORTB, pinNum); //Write 0
 4d6:	28 b3       	in	r18, 0x18	; 24
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_write+0x60>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_write+0x5c>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	08 95       	ret
			}else if (value == HIGH){
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <DIO_write+0x72>
 4f2:	40 c0       	rjmp	.+128    	; 0x574 <DIO_write+0xf2>
				SET_BIT(PORTB, pinNum); //Write 1
 4f4:	28 b3       	in	r18, 0x18	; 24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0x7e>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0x7a>
 504:	82 2b       	or	r24, r18
 506:	88 bb       	out	0x18, r24	; 24
 508:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_C:
			if(value == LOW){
 50a:	41 11       	cpse	r20, r1
 50c:	0c c0       	rjmp	.+24     	; 0x526 <DIO_write+0xa4>
				CLEAR_BIT(PORTC, pinNum); //Write 0
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0x98>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0x94>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	85 bb       	out	0x15, r24	; 21
 524:	08 95       	ret
			}else if (value == HIGH){
 526:	41 30       	cpi	r20, 0x01	; 1
 528:	29 f5       	brne	.+74     	; 0x574 <DIO_write+0xf2>
				SET_BIT(PORTC, pinNum); //Write 1
 52a:	25 b3       	in	r18, 0x15	; 21
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_write+0xb4>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_write+0xb0>
 53a:	82 2b       	or	r24, r18
 53c:	85 bb       	out	0x15, r24	; 21
 53e:	08 95       	ret
			else{
				//Error handling
			}
			break;
		case PORT_D:
			if(value == LOW){
 540:	41 11       	cpse	r20, r1
 542:	0c c0       	rjmp	.+24     	; 0x55c <DIO_write+0xda>
				CLEAR_BIT(PORTD, pinNum); //Write 0
 544:	22 b3       	in	r18, 0x12	; 18
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_write+0xce>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_write+0xca>
 554:	80 95       	com	r24
 556:	82 23       	and	r24, r18
 558:	82 bb       	out	0x12, r24	; 18
 55a:	08 95       	ret
			}else if (value == HIGH){
 55c:	41 30       	cpi	r20, 0x01	; 1
 55e:	51 f4       	brne	.+20     	; 0x574 <DIO_write+0xf2>
				SET_BIT(PORTD, pinNum);//Write 1
 560:	22 b3       	in	r18, 0x12	; 18
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_write+0xea>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_write+0xe6>
 570:	82 2b       	or	r24, r18
 572:	82 bb       	out	0x12, r24	; 18
 574:	08 95       	ret

00000576 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portNum, uint8_t pinNum)
{
	switch(portNum){
 576:	82 34       	cpi	r24, 0x42	; 66
 578:	a1 f0       	breq	.+40     	; 0x5a2 <DIO_toggle+0x2c>
 57a:	18 f4       	brcc	.+6      	; 0x582 <DIO_toggle+0xc>
 57c:	81 34       	cpi	r24, 0x41	; 65
 57e:	31 f0       	breq	.+12     	; 0x58c <DIO_toggle+0x16>
 580:	08 95       	ret
 582:	83 34       	cpi	r24, 0x43	; 67
 584:	c9 f0       	breq	.+50     	; 0x5b8 <DIO_toggle+0x42>
 586:	84 34       	cpi	r24, 0x44	; 68
 588:	11 f1       	breq	.+68     	; 0x5ce <DIO_toggle+0x58>
 58a:	08 95       	ret
		case PORT_A:
			TOGGLE_BIT(PORTA,pinNum);
 58c:	2b b3       	in	r18, 0x1b	; 27
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_toggle+0x22>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_toggle+0x1e>
 59c:	82 27       	eor	r24, r18
 59e:	8b bb       	out	0x1b, r24	; 27
			break;
 5a0:	08 95       	ret
		case PORT_B:
			TOGGLE_BIT(PORTB,pinNum);
 5a2:	28 b3       	in	r18, 0x18	; 24
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_toggle+0x38>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_toggle+0x34>
 5b2:	82 27       	eor	r24, r18
 5b4:	88 bb       	out	0x18, r24	; 24
			break;
 5b6:	08 95       	ret
		case PORT_C:
			TOGGLE_BIT(PORTC,pinNum);
 5b8:	25 b3       	in	r18, 0x15	; 21
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_toggle+0x4e>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	6a 95       	dec	r22
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_toggle+0x4a>
 5c8:	82 27       	eor	r24, r18
 5ca:	85 bb       	out	0x15, r24	; 21
			break;
 5cc:	08 95       	ret
		case PORT_D:
			TOGGLE_BIT(PORTD,pinNum);
 5ce:	22 b3       	in	r18, 0x12	; 18
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_toggle+0x64>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_toggle+0x60>
 5de:	82 27       	eor	r24, r18
 5e0:	82 bb       	out	0x12, r24	; 18
 5e2:	08 95       	ret

000005e4 <Timer_init>:
//Include .h
#include "Timer_Driver.h"

//All timer function definitions
void Timer_init(){
	TCCR0 = 0x00; //normal mode
 5e4:	13 be       	out	0x33, r1	; 51
 5e6:	08 95       	ret

000005e8 <Timer_delay>:
}

void Timer_delay(uint16_t ms){
 5e8:	8f 92       	push	r8
 5ea:	9f 92       	push	r9
 5ec:	af 92       	push	r10
 5ee:	bf 92       	push	r11
 5f0:	cf 92       	push	r12
 5f2:	df 92       	push	r13
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
	//max delay 256 micro second
	//at 1MHz no pre-scaler
	//256 pre-scaler
	tic = 256.0/1000.0; //ms    tic = Pre-scaler/FCPU
	maxDelay = 65.536; //ms		Tmaxdelay = tic * 2^8
	if(ms < maxDelay)
 5fc:	bc 01       	movw	r22, r24
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 a4 04 	call	0x948	; 0x948 <__floatunsisf>
 606:	6b 01       	movw	r12, r22
 608:	7c 01       	movw	r14, r24
 60a:	2f e6       	ldi	r18, 0x6F	; 111
 60c:	32 e1       	ldi	r19, 0x12	; 18
 60e:	43 e8       	ldi	r20, 0x83	; 131
 610:	52 e4       	ldi	r21, 0x42	; 66
 612:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__cmpsf2>
 616:	88 23       	and	r24, r24
 618:	9c f4       	brge	.+38     	; 0x640 <Timer_delay+0x58>
	{
		initTimer = (maxDelay - ms)/tic;
 61a:	a7 01       	movw	r20, r14
 61c:	96 01       	movw	r18, r12
 61e:	6f e6       	ldi	r22, 0x6F	; 111
 620:	72 e1       	ldi	r23, 0x12	; 18
 622:	83 e8       	ldi	r24, 0x83	; 131
 624:	92 e4       	ldi	r25, 0x42	; 66
 626:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__subsf3>
 62a:	2f e6       	ldi	r18, 0x6F	; 111
 62c:	32 e1       	ldi	r19, 0x12	; 18
 62e:	43 e8       	ldi	r20, 0x83	; 131
 630:	5e e3       	ldi	r21, 0x3E	; 62
 632:	0e 94 03 04 	call	0x806	; 0x806 <__divsf3>
 636:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fixunssfsi>
		OFNum = 1;
 63a:	c1 e0       	ldi	r28, 0x01	; 1
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	3c c0       	rjmp	.+120    	; 0x6b8 <Timer_delay+0xd0>
	}
	else 
	{
		if(ms > maxDelay)
 640:	2f e6       	ldi	r18, 0x6F	; 111
 642:	32 e1       	ldi	r19, 0x12	; 18
 644:	43 e8       	ldi	r20, 0x83	; 131
 646:	52 e4       	ldi	r21, 0x42	; 66
 648:	c7 01       	movw	r24, r14
 64a:	b6 01       	movw	r22, r12
 64c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__gesf2>
 650:	18 16       	cp	r1, r24
 652:	7c f5       	brge	.+94     	; 0x6b2 <Timer_delay+0xca>
		{
			OFNum = ceil((double)ms/maxDelay);
 654:	2f e6       	ldi	r18, 0x6F	; 111
 656:	32 e1       	ldi	r19, 0x12	; 18
 658:	43 e8       	ldi	r20, 0x83	; 131
 65a:	52 e4       	ldi	r21, 0x42	; 66
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 03 04 	call	0x806	; 0x806 <__divsf3>
 664:	0e 94 e7 03 	call	0x7ce	; 0x7ce <ceil>
 668:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fixunssfsi>
 66c:	4b 01       	movw	r8, r22
 66e:	5c 01       	movw	r10, r24
 670:	eb 01       	movw	r28, r22
			initTimer = (1<<8) - ((double)ms/tic)/OFNum;
 672:	2f e6       	ldi	r18, 0x6F	; 111
 674:	32 e1       	ldi	r19, 0x12	; 18
 676:	43 e8       	ldi	r20, 0x83	; 131
 678:	5e e3       	ldi	r21, 0x3E	; 62
 67a:	c7 01       	movw	r24, r14
 67c:	b6 01       	movw	r22, r12
 67e:	0e 94 03 04 	call	0x806	; 0x806 <__divsf3>
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
 686:	b4 01       	movw	r22, r8
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 94 a4 04 	call	0x948	; 0x948 <__floatunsisf>
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	c7 01       	movw	r24, r14
 696:	b6 01       	movw	r22, r12
 698:	0e 94 03 04 	call	0x806	; 0x806 <__divsf3>
 69c:	9b 01       	movw	r18, r22
 69e:	ac 01       	movw	r20, r24
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	93 e4       	ldi	r25, 0x43	; 67
 6a8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__subsf3>
 6ac:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fixunssfsi>
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <Timer_delay+0xd0>
		
		}
		else
		{
			initTimer = 0;
 6b2:	60 e0       	ldi	r22, 0x00	; 0
			OFNum = 1;
 6b4:	c1 e0       	ldi	r28, 0x01	; 1
 6b6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
	}
	TCNT0 = initTimer;
 6b8:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2); //set 256 pre-scaler
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	84 60       	ori	r24, 0x04	; 4
 6be:	83 bf       	out	0x33, r24	; 51
}

void Timer_delay(uint16_t ms){
	uint16_t OFNum,initTimer;
	double maxDelay,tic;
	uint32_t OFC = 0;
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
		}
		
	}
	TCNT0 = initTimer;
	TCCR0 |= (1<<2); //set 256 pre-scaler
	while(OFC < OFNum)
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <Timer_delay+0xee>
	{
		//busy wait
		while((READ_BIT(TIFR,0)) == 0);
 6c6:	08 b6       	in	r0, 0x38	; 56
 6c8:	00 fe       	sbrs	r0, 0
 6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <Timer_delay+0xde>
		//clear overflow flag
		SET_BIT(TIFR,0);
 6cc:	88 b7       	in	r24, 0x38	; 56
 6ce:	81 60       	ori	r24, 0x01	; 1
 6d0:	88 bf       	out	0x38, r24	; 56
		//increment counter
		OFC++;
 6d2:	2f 5f       	subi	r18, 0xFF	; 255
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		
	}
	TCNT0 = initTimer;
	TCCR0 |= (1<<2); //set 256 pre-scaler
	while(OFC < OFNum)
 6d6:	2c 17       	cp	r18, r28
 6d8:	3d 07       	cpc	r19, r29
 6da:	a8 f3       	brcs	.-22     	; 0x6c6 <Timer_delay+0xde>
		SET_BIT(TIFR,0);
		//increment counter
		OFC++;
	}
	//Timer stop
	TCCR0 = 0x00;
 6dc:	13 be       	out	0x33, r1	; 51
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	bf 90       	pop	r11
 6ec:	af 90       	pop	r10
 6ee:	9f 90       	pop	r9
 6f0:	8f 90       	pop	r8
 6f2:	08 95       	ret

000006f4 <__subsf3>:
 6f4:	50 58       	subi	r21, 0x80	; 128

000006f6 <__addsf3>:
 6f6:	bb 27       	eor	r27, r27
 6f8:	aa 27       	eor	r26, r26
 6fa:	0e 94 92 03 	call	0x724	; 0x724 <__addsf3x>
 6fe:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_round>
 702:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_pscA>
 706:	38 f0       	brcs	.+14     	; 0x716 <__addsf3+0x20>
 708:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscB>
 70c:	20 f0       	brcs	.+8      	; 0x716 <__addsf3+0x20>
 70e:	39 f4       	brne	.+14     	; 0x71e <__addsf3+0x28>
 710:	9f 3f       	cpi	r25, 0xFF	; 255
 712:	19 f4       	brne	.+6      	; 0x71a <__addsf3+0x24>
 714:	26 f4       	brtc	.+8      	; 0x71e <__addsf3+0x28>
 716:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_nan>
 71a:	0e f4       	brtc	.+2      	; 0x71e <__addsf3+0x28>
 71c:	e0 95       	com	r30
 71e:	e7 fb       	bst	r30, 7
 720:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>

00000724 <__addsf3x>:
 724:	e9 2f       	mov	r30, r25
 726:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_split3>
 72a:	58 f3       	brcs	.-42     	; 0x702 <__addsf3+0xc>
 72c:	ba 17       	cp	r27, r26
 72e:	62 07       	cpc	r22, r18
 730:	73 07       	cpc	r23, r19
 732:	84 07       	cpc	r24, r20
 734:	95 07       	cpc	r25, r21
 736:	20 f0       	brcs	.+8      	; 0x740 <__addsf3x+0x1c>
 738:	79 f4       	brne	.+30     	; 0x758 <__addsf3x+0x34>
 73a:	a6 f5       	brtc	.+104    	; 0x7a4 <__addsf3x+0x80>
 73c:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_zero>
 740:	0e f4       	brtc	.+2      	; 0x744 <__addsf3x+0x20>
 742:	e0 95       	com	r30
 744:	0b 2e       	mov	r0, r27
 746:	ba 2f       	mov	r27, r26
 748:	a0 2d       	mov	r26, r0
 74a:	0b 01       	movw	r0, r22
 74c:	b9 01       	movw	r22, r18
 74e:	90 01       	movw	r18, r0
 750:	0c 01       	movw	r0, r24
 752:	ca 01       	movw	r24, r20
 754:	a0 01       	movw	r20, r0
 756:	11 24       	eor	r1, r1
 758:	ff 27       	eor	r31, r31
 75a:	59 1b       	sub	r21, r25
 75c:	99 f0       	breq	.+38     	; 0x784 <__addsf3x+0x60>
 75e:	59 3f       	cpi	r21, 0xF9	; 249
 760:	50 f4       	brcc	.+20     	; 0x776 <__addsf3x+0x52>
 762:	50 3e       	cpi	r21, 0xE0	; 224
 764:	68 f1       	brcs	.+90     	; 0x7c0 <__addsf3x+0x9c>
 766:	1a 16       	cp	r1, r26
 768:	f0 40       	sbci	r31, 0x00	; 0
 76a:	a2 2f       	mov	r26, r18
 76c:	23 2f       	mov	r18, r19
 76e:	34 2f       	mov	r19, r20
 770:	44 27       	eor	r20, r20
 772:	58 5f       	subi	r21, 0xF8	; 248
 774:	f3 cf       	rjmp	.-26     	; 0x75c <__addsf3x+0x38>
 776:	46 95       	lsr	r20
 778:	37 95       	ror	r19
 77a:	27 95       	ror	r18
 77c:	a7 95       	ror	r26
 77e:	f0 40       	sbci	r31, 0x00	; 0
 780:	53 95       	inc	r21
 782:	c9 f7       	brne	.-14     	; 0x776 <__addsf3x+0x52>
 784:	7e f4       	brtc	.+30     	; 0x7a4 <__addsf3x+0x80>
 786:	1f 16       	cp	r1, r31
 788:	ba 0b       	sbc	r27, r26
 78a:	62 0b       	sbc	r22, r18
 78c:	73 0b       	sbc	r23, r19
 78e:	84 0b       	sbc	r24, r20
 790:	ba f0       	brmi	.+46     	; 0x7c0 <__addsf3x+0x9c>
 792:	91 50       	subi	r25, 0x01	; 1
 794:	a1 f0       	breq	.+40     	; 0x7be <__addsf3x+0x9a>
 796:	ff 0f       	add	r31, r31
 798:	bb 1f       	adc	r27, r27
 79a:	66 1f       	adc	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	88 1f       	adc	r24, r24
 7a0:	c2 f7       	brpl	.-16     	; 0x792 <__addsf3x+0x6e>
 7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <__addsf3x+0x9c>
 7a4:	ba 0f       	add	r27, r26
 7a6:	62 1f       	adc	r22, r18
 7a8:	73 1f       	adc	r23, r19
 7aa:	84 1f       	adc	r24, r20
 7ac:	48 f4       	brcc	.+18     	; 0x7c0 <__addsf3x+0x9c>
 7ae:	87 95       	ror	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	f7 95       	ror	r31
 7b8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ba:	08 f0       	brcs	.+2      	; 0x7be <__addsf3x+0x9a>
 7bc:	b0 cf       	rjmp	.-160    	; 0x71e <__addsf3+0x28>
 7be:	93 95       	inc	r25
 7c0:	88 0f       	add	r24, r24
 7c2:	08 f0       	brcs	.+2      	; 0x7c6 <__addsf3x+0xa2>
 7c4:	99 27       	eor	r25, r25
 7c6:	ee 0f       	add	r30, r30
 7c8:	97 95       	ror	r25
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret

000007ce <ceil>:
 7ce:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_trunc>
 7d2:	90 f0       	brcs	.+36     	; 0x7f8 <ceil+0x2a>
 7d4:	9f 37       	cpi	r25, 0x7F	; 127
 7d6:	48 f4       	brcc	.+18     	; 0x7ea <ceil+0x1c>
 7d8:	91 11       	cpse	r25, r1
 7da:	16 f4       	brtc	.+4      	; 0x7e0 <ceil+0x12>
 7dc:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_szero>
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	80 e8       	ldi	r24, 0x80	; 128
 7e6:	9f e3       	ldi	r25, 0x3F	; 63
 7e8:	08 95       	ret
 7ea:	26 f0       	brts	.+8      	; 0x7f4 <ceil+0x26>
 7ec:	1b 16       	cp	r1, r27
 7ee:	61 1d       	adc	r22, r1
 7f0:	71 1d       	adc	r23, r1
 7f2:	81 1d       	adc	r24, r1
 7f4:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_mintl>
 7f8:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__fp_mpack>

000007fc <__cmpsf2>:
 7fc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_cmp>
 800:	08 f4       	brcc	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	08 95       	ret

00000806 <__divsf3>:
 806:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3x>
 80a:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__fp_round>
 80e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fp_pscB>
 812:	58 f0       	brcs	.+22     	; 0x82a <__divsf3+0x24>
 814:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fp_pscA>
 818:	40 f0       	brcs	.+16     	; 0x82a <__divsf3+0x24>
 81a:	29 f4       	brne	.+10     	; 0x826 <__divsf3+0x20>
 81c:	5f 3f       	cpi	r21, 0xFF	; 255
 81e:	29 f0       	breq	.+10     	; 0x82a <__divsf3+0x24>
 820:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 824:	51 11       	cpse	r21, r1
 826:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_szero>
 82a:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_nan>

0000082e <__divsf3x>:
 82e:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_split3>
 832:	68 f3       	brcs	.-38     	; 0x80e <__divsf3+0x8>

00000834 <__divsf3_pse>:
 834:	99 23       	and	r25, r25
 836:	b1 f3       	breq	.-20     	; 0x824 <__divsf3+0x1e>
 838:	55 23       	and	r21, r21
 83a:	91 f3       	breq	.-28     	; 0x820 <__divsf3+0x1a>
 83c:	95 1b       	sub	r25, r21
 83e:	55 0b       	sbc	r21, r21
 840:	bb 27       	eor	r27, r27
 842:	aa 27       	eor	r26, r26
 844:	62 17       	cp	r22, r18
 846:	73 07       	cpc	r23, r19
 848:	84 07       	cpc	r24, r20
 84a:	38 f0       	brcs	.+14     	; 0x85a <__divsf3_pse+0x26>
 84c:	9f 5f       	subi	r25, 0xFF	; 255
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	22 0f       	add	r18, r18
 852:	33 1f       	adc	r19, r19
 854:	44 1f       	adc	r20, r20
 856:	aa 1f       	adc	r26, r26
 858:	a9 f3       	breq	.-22     	; 0x844 <__divsf3_pse+0x10>
 85a:	35 d0       	rcall	.+106    	; 0x8c6 <__stack+0x67>
 85c:	0e 2e       	mov	r0, r30
 85e:	3a f0       	brmi	.+14     	; 0x86e <__stack+0xf>
 860:	e0 e8       	ldi	r30, 0x80	; 128
 862:	32 d0       	rcall	.+100    	; 0x8c8 <__stack+0x69>
 864:	91 50       	subi	r25, 0x01	; 1
 866:	50 40       	sbci	r21, 0x00	; 0
 868:	e6 95       	lsr	r30
 86a:	00 1c       	adc	r0, r0
 86c:	ca f7       	brpl	.-14     	; 0x860 <__stack+0x1>
 86e:	2b d0       	rcall	.+86     	; 0x8c6 <__stack+0x67>
 870:	fe 2f       	mov	r31, r30
 872:	29 d0       	rcall	.+82     	; 0x8c6 <__stack+0x67>
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	bb 1f       	adc	r27, r27
 87c:	26 17       	cp	r18, r22
 87e:	37 07       	cpc	r19, r23
 880:	48 07       	cpc	r20, r24
 882:	ab 07       	cpc	r26, r27
 884:	b0 e8       	ldi	r27, 0x80	; 128
 886:	09 f0       	breq	.+2      	; 0x88a <__stack+0x2b>
 888:	bb 0b       	sbc	r27, r27
 88a:	80 2d       	mov	r24, r0
 88c:	bf 01       	movw	r22, r30
 88e:	ff 27       	eor	r31, r31
 890:	93 58       	subi	r25, 0x83	; 131
 892:	5f 4f       	sbci	r21, 0xFF	; 255
 894:	3a f0       	brmi	.+14     	; 0x8a4 <__stack+0x45>
 896:	9e 3f       	cpi	r25, 0xFE	; 254
 898:	51 05       	cpc	r21, r1
 89a:	78 f0       	brcs	.+30     	; 0x8ba <__stack+0x5b>
 89c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 8a0:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_szero>
 8a4:	5f 3f       	cpi	r21, 0xFF	; 255
 8a6:	e4 f3       	brlt	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	98 3e       	cpi	r25, 0xE8	; 232
 8aa:	d4 f3       	brlt	.-12     	; 0x8a0 <__stack+0x41>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b7 95       	ror	r27
 8b4:	f7 95       	ror	r31
 8b6:	9f 5f       	subi	r25, 0xFF	; 255
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <__stack+0x4d>
 8ba:	88 0f       	add	r24, r24
 8bc:	91 1d       	adc	r25, r1
 8be:	96 95       	lsr	r25
 8c0:	87 95       	ror	r24
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret
 8c6:	e1 e0       	ldi	r30, 0x01	; 1
 8c8:	66 0f       	add	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	bb 1f       	adc	r27, r27
 8d0:	62 17       	cp	r22, r18
 8d2:	73 07       	cpc	r23, r19
 8d4:	84 07       	cpc	r24, r20
 8d6:	ba 07       	cpc	r27, r26
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__stack+0x83>
 8da:	62 1b       	sub	r22, r18
 8dc:	73 0b       	sbc	r23, r19
 8de:	84 0b       	sbc	r24, r20
 8e0:	ba 0b       	sbc	r27, r26
 8e2:	ee 1f       	adc	r30, r30
 8e4:	88 f7       	brcc	.-30     	; 0x8c8 <__stack+0x69>
 8e6:	e0 95       	com	r30
 8e8:	08 95       	ret

000008ea <__fixunssfsi>:
 8ea:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_splitA>
 8ee:	88 f0       	brcs	.+34     	; 0x912 <__fixunssfsi+0x28>
 8f0:	9f 57       	subi	r25, 0x7F	; 127
 8f2:	98 f0       	brcs	.+38     	; 0x91a <__fixunssfsi+0x30>
 8f4:	b9 2f       	mov	r27, r25
 8f6:	99 27       	eor	r25, r25
 8f8:	b7 51       	subi	r27, 0x17	; 23
 8fa:	b0 f0       	brcs	.+44     	; 0x928 <__fixunssfsi+0x3e>
 8fc:	e1 f0       	breq	.+56     	; 0x936 <__fixunssfsi+0x4c>
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	1a f0       	brmi	.+6      	; 0x90e <__fixunssfsi+0x24>
 908:	ba 95       	dec	r27
 90a:	c9 f7       	brne	.-14     	; 0x8fe <__fixunssfsi+0x14>
 90c:	14 c0       	rjmp	.+40     	; 0x936 <__fixunssfsi+0x4c>
 90e:	b1 30       	cpi	r27, 0x01	; 1
 910:	91 f0       	breq	.+36     	; 0x936 <__fixunssfsi+0x4c>
 912:	0e 94 90 05 	call	0xb20	; 0xb20 <__fp_zero>
 916:	b1 e0       	ldi	r27, 0x01	; 1
 918:	08 95       	ret
 91a:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_zero>
 91e:	67 2f       	mov	r22, r23
 920:	78 2f       	mov	r23, r24
 922:	88 27       	eor	r24, r24
 924:	b8 5f       	subi	r27, 0xF8	; 248
 926:	39 f0       	breq	.+14     	; 0x936 <__fixunssfsi+0x4c>
 928:	b9 3f       	cpi	r27, 0xF9	; 249
 92a:	cc f3       	brlt	.-14     	; 0x91e <__fixunssfsi+0x34>
 92c:	86 95       	lsr	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b3 95       	inc	r27
 934:	d9 f7       	brne	.-10     	; 0x92c <__fixunssfsi+0x42>
 936:	3e f4       	brtc	.+14     	; 0x946 <__fixunssfsi+0x5c>
 938:	90 95       	com	r25
 93a:	80 95       	com	r24
 93c:	70 95       	com	r23
 93e:	61 95       	neg	r22
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__floatunsisf>:
 948:	e8 94       	clt
 94a:	09 c0       	rjmp	.+18     	; 0x95e <__floatsisf+0x12>

0000094c <__floatsisf>:
 94c:	97 fb       	bst	r25, 7
 94e:	3e f4       	brtc	.+14     	; 0x95e <__floatsisf+0x12>
 950:	90 95       	com	r25
 952:	80 95       	com	r24
 954:	70 95       	com	r23
 956:	61 95       	neg	r22
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	99 23       	and	r25, r25
 960:	a9 f0       	breq	.+42     	; 0x98c <__floatsisf+0x40>
 962:	f9 2f       	mov	r31, r25
 964:	96 e9       	ldi	r25, 0x96	; 150
 966:	bb 27       	eor	r27, r27
 968:	93 95       	inc	r25
 96a:	f6 95       	lsr	r31
 96c:	87 95       	ror	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	b7 95       	ror	r27
 974:	f1 11       	cpse	r31, r1
 976:	f8 cf       	rjmp	.-16     	; 0x968 <__floatsisf+0x1c>
 978:	fa f4       	brpl	.+62     	; 0x9b8 <__floatsisf+0x6c>
 97a:	bb 0f       	add	r27, r27
 97c:	11 f4       	brne	.+4      	; 0x982 <__floatsisf+0x36>
 97e:	60 ff       	sbrs	r22, 0
 980:	1b c0       	rjmp	.+54     	; 0x9b8 <__floatsisf+0x6c>
 982:	6f 5f       	subi	r22, 0xFF	; 255
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	16 c0       	rjmp	.+44     	; 0x9b8 <__floatsisf+0x6c>
 98c:	88 23       	and	r24, r24
 98e:	11 f0       	breq	.+4      	; 0x994 <__floatsisf+0x48>
 990:	96 e9       	ldi	r25, 0x96	; 150
 992:	11 c0       	rjmp	.+34     	; 0x9b6 <__floatsisf+0x6a>
 994:	77 23       	and	r23, r23
 996:	21 f0       	breq	.+8      	; 0x9a0 <__floatsisf+0x54>
 998:	9e e8       	ldi	r25, 0x8E	; 142
 99a:	87 2f       	mov	r24, r23
 99c:	76 2f       	mov	r23, r22
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__floatsisf+0x5e>
 9a0:	66 23       	and	r22, r22
 9a2:	71 f0       	breq	.+28     	; 0x9c0 <__floatsisf+0x74>
 9a4:	96 e8       	ldi	r25, 0x86	; 134
 9a6:	86 2f       	mov	r24, r22
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	2a f0       	brmi	.+10     	; 0x9b8 <__floatsisf+0x6c>
 9ae:	9a 95       	dec	r25
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	da f7       	brpl	.-10     	; 0x9ae <__floatsisf+0x62>
 9b8:	88 0f       	add	r24, r24
 9ba:	96 95       	lsr	r25
 9bc:	87 95       	ror	r24
 9be:	97 f9       	bld	r25, 7
 9c0:	08 95       	ret

000009c2 <__fp_cmp>:
 9c2:	99 0f       	add	r25, r25
 9c4:	00 08       	sbc	r0, r0
 9c6:	55 0f       	add	r21, r21
 9c8:	aa 0b       	sbc	r26, r26
 9ca:	e0 e8       	ldi	r30, 0x80	; 128
 9cc:	fe ef       	ldi	r31, 0xFE	; 254
 9ce:	16 16       	cp	r1, r22
 9d0:	17 06       	cpc	r1, r23
 9d2:	e8 07       	cpc	r30, r24
 9d4:	f9 07       	cpc	r31, r25
 9d6:	c0 f0       	brcs	.+48     	; 0xa08 <__fp_cmp+0x46>
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	e4 07       	cpc	r30, r20
 9de:	f5 07       	cpc	r31, r21
 9e0:	98 f0       	brcs	.+38     	; 0xa08 <__fp_cmp+0x46>
 9e2:	62 1b       	sub	r22, r18
 9e4:	73 0b       	sbc	r23, r19
 9e6:	84 0b       	sbc	r24, r20
 9e8:	95 0b       	sbc	r25, r21
 9ea:	39 f4       	brne	.+14     	; 0x9fa <__fp_cmp+0x38>
 9ec:	0a 26       	eor	r0, r26
 9ee:	61 f0       	breq	.+24     	; 0xa08 <__fp_cmp+0x46>
 9f0:	23 2b       	or	r18, r19
 9f2:	24 2b       	or	r18, r20
 9f4:	25 2b       	or	r18, r21
 9f6:	21 f4       	brne	.+8      	; 0xa00 <__fp_cmp+0x3e>
 9f8:	08 95       	ret
 9fa:	0a 26       	eor	r0, r26
 9fc:	09 f4       	brne	.+2      	; 0xa00 <__fp_cmp+0x3e>
 9fe:	a1 40       	sbci	r26, 0x01	; 1
 a00:	a6 95       	lsr	r26
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	81 1d       	adc	r24, r1
 a06:	81 1d       	adc	r24, r1
 a08:	08 95       	ret

00000a0a <__fp_inf>:
 a0a:	97 f9       	bld	r25, 7
 a0c:	9f 67       	ori	r25, 0x7F	; 127
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	08 95       	ret

00000a16 <__fp_mintl>:
 a16:	88 23       	and	r24, r24
 a18:	71 f4       	brne	.+28     	; 0xa36 <__fp_mintl+0x20>
 a1a:	77 23       	and	r23, r23
 a1c:	21 f0       	breq	.+8      	; 0xa26 <__fp_mintl+0x10>
 a1e:	98 50       	subi	r25, 0x08	; 8
 a20:	87 2b       	or	r24, r23
 a22:	76 2f       	mov	r23, r22
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <__fp_mintl+0x1e>
 a26:	66 23       	and	r22, r22
 a28:	11 f4       	brne	.+4      	; 0xa2e <__fp_mintl+0x18>
 a2a:	99 27       	eor	r25, r25
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__fp_mintl+0x32>
 a2e:	90 51       	subi	r25, 0x10	; 16
 a30:	86 2b       	or	r24, r22
 a32:	70 e0       	ldi	r23, 0x00	; 0
 a34:	60 e0       	ldi	r22, 0x00	; 0
 a36:	2a f0       	brmi	.+10     	; 0xa42 <__fp_mintl+0x2c>
 a38:	9a 95       	dec	r25
 a3a:	66 0f       	add	r22, r22
 a3c:	77 1f       	adc	r23, r23
 a3e:	88 1f       	adc	r24, r24
 a40:	da f7       	brpl	.-10     	; 0xa38 <__fp_mintl+0x22>
 a42:	88 0f       	add	r24, r24
 a44:	96 95       	lsr	r25
 a46:	87 95       	ror	r24
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__fp_mpack>:
 a4c:	9f 3f       	cpi	r25, 0xFF	; 255
 a4e:	31 f0       	breq	.+12     	; 0xa5c <__fp_mpack_finite+0xc>

00000a50 <__fp_mpack_finite>:
 a50:	91 50       	subi	r25, 0x01	; 1
 a52:	20 f4       	brcc	.+8      	; 0xa5c <__fp_mpack_finite+0xc>
 a54:	87 95       	ror	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	b7 95       	ror	r27
 a5c:	88 0f       	add	r24, r24
 a5e:	91 1d       	adc	r25, r1
 a60:	96 95       	lsr	r25
 a62:	87 95       	ror	r24
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <__fp_nan>:
 a68:	9f ef       	ldi	r25, 0xFF	; 255
 a6a:	80 ec       	ldi	r24, 0xC0	; 192
 a6c:	08 95       	ret

00000a6e <__fp_pscA>:
 a6e:	00 24       	eor	r0, r0
 a70:	0a 94       	dec	r0
 a72:	16 16       	cp	r1, r22
 a74:	17 06       	cpc	r1, r23
 a76:	18 06       	cpc	r1, r24
 a78:	09 06       	cpc	r0, r25
 a7a:	08 95       	ret

00000a7c <__fp_pscB>:
 a7c:	00 24       	eor	r0, r0
 a7e:	0a 94       	dec	r0
 a80:	12 16       	cp	r1, r18
 a82:	13 06       	cpc	r1, r19
 a84:	14 06       	cpc	r1, r20
 a86:	05 06       	cpc	r0, r21
 a88:	08 95       	ret

00000a8a <__fp_round>:
 a8a:	09 2e       	mov	r0, r25
 a8c:	03 94       	inc	r0
 a8e:	00 0c       	add	r0, r0
 a90:	11 f4       	brne	.+4      	; 0xa96 <__fp_round+0xc>
 a92:	88 23       	and	r24, r24
 a94:	52 f0       	brmi	.+20     	; 0xaaa <__fp_round+0x20>
 a96:	bb 0f       	add	r27, r27
 a98:	40 f4       	brcc	.+16     	; 0xaaa <__fp_round+0x20>
 a9a:	bf 2b       	or	r27, r31
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__fp_round+0x18>
 a9e:	60 ff       	sbrs	r22, 0
 aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__fp_round+0x20>
 aa2:	6f 5f       	subi	r22, 0xFF	; 255
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	08 95       	ret

00000aac <__fp_split3>:
 aac:	57 fd       	sbrc	r21, 7
 aae:	90 58       	subi	r25, 0x80	; 128
 ab0:	44 0f       	add	r20, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	59 f0       	breq	.+22     	; 0xacc <__fp_splitA+0x10>
 ab6:	5f 3f       	cpi	r21, 0xFF	; 255
 ab8:	71 f0       	breq	.+28     	; 0xad6 <__fp_splitA+0x1a>
 aba:	47 95       	ror	r20

00000abc <__fp_splitA>:
 abc:	88 0f       	add	r24, r24
 abe:	97 fb       	bst	r25, 7
 ac0:	99 1f       	adc	r25, r25
 ac2:	61 f0       	breq	.+24     	; 0xadc <__fp_splitA+0x20>
 ac4:	9f 3f       	cpi	r25, 0xFF	; 255
 ac6:	79 f0       	breq	.+30     	; 0xae6 <__fp_splitA+0x2a>
 ac8:	87 95       	ror	r24
 aca:	08 95       	ret
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	14 06       	cpc	r1, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	f2 cf       	rjmp	.-28     	; 0xaba <__fp_split3+0xe>
 ad6:	46 95       	lsr	r20
 ad8:	f1 df       	rcall	.-30     	; 0xabc <__fp_splitA>
 ada:	08 c0       	rjmp	.+16     	; 0xaec <__fp_splitA+0x30>
 adc:	16 16       	cp	r1, r22
 ade:	17 06       	cpc	r1, r23
 ae0:	18 06       	cpc	r1, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	f1 cf       	rjmp	.-30     	; 0xac8 <__fp_splitA+0xc>
 ae6:	86 95       	lsr	r24
 ae8:	71 05       	cpc	r23, r1
 aea:	61 05       	cpc	r22, r1
 aec:	08 94       	sec
 aee:	08 95       	ret

00000af0 <__fp_trunc>:
 af0:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_splitA>
 af4:	a0 f0       	brcs	.+40     	; 0xb1e <__fp_trunc+0x2e>
 af6:	be e7       	ldi	r27, 0x7E	; 126
 af8:	b9 17       	cp	r27, r25
 afa:	88 f4       	brcc	.+34     	; 0xb1e <__fp_trunc+0x2e>
 afc:	bb 27       	eor	r27, r27
 afe:	9f 38       	cpi	r25, 0x8F	; 143
 b00:	60 f4       	brcc	.+24     	; 0xb1a <__fp_trunc+0x2a>
 b02:	16 16       	cp	r1, r22
 b04:	b1 1d       	adc	r27, r1
 b06:	67 2f       	mov	r22, r23
 b08:	78 2f       	mov	r23, r24
 b0a:	88 27       	eor	r24, r24
 b0c:	98 5f       	subi	r25, 0xF8	; 248
 b0e:	f7 cf       	rjmp	.-18     	; 0xafe <__fp_trunc+0xe>
 b10:	86 95       	lsr	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	b1 1d       	adc	r27, r1
 b18:	93 95       	inc	r25
 b1a:	96 39       	cpi	r25, 0x96	; 150
 b1c:	c8 f3       	brcs	.-14     	; 0xb10 <__fp_trunc+0x20>
 b1e:	08 95       	ret

00000b20 <__fp_zero>:
 b20:	e8 94       	clt

00000b22 <__fp_szero>:
 b22:	bb 27       	eor	r27, r27
 b24:	66 27       	eor	r22, r22
 b26:	77 27       	eor	r23, r23
 b28:	cb 01       	movw	r24, r22
 b2a:	97 f9       	bld	r25, 7
 b2c:	08 95       	ret

00000b2e <__gesf2>:
 b2e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_cmp>
 b32:	08 f4       	brcc	.+2      	; 0xb36 <__gesf2+0x8>
 b34:	8f ef       	ldi	r24, 0xFF	; 255
 b36:	08 95       	ret

00000b38 <_exit>:
 b38:	f8 94       	cli

00000b3a <__stop_program>:
 b3a:	ff cf       	rjmp	.-2      	; 0xb3a <__stop_program>
